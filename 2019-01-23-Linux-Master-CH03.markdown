# CH3. 네트워크의 이해


## 1. 네트워크의 기초

### **1.1. OSI 7계층**
- 컴퓨터 네트워크 프로토콜 디자인과 통신을 7계층으로 나누어 정의한 것으로 ISO에서 개발
- 각 계층은 독립적이며 하위계층의 기능을 이용하고 상위계층에게 기능을 제공한다.
- 계층별 특징
    - **L7: Application Layer**
        - 응용프로그램과 연계하여 사용자와 직접 상호작용
        - 인터넷상 전송단위: data
        - Chrome, Firefox, .... / SMTP, HTTP, FTP, ...
    - **L6: Presentation Layer**
        - 서로 다른 표현방식을 사용하는 송수신자가 서로의 데이터를 이해할 수 있도록 번역하는 서비스
        - 인터넷상 전송단위: data 
        - SMB, AFP, ...
    - **L5: Seesion Layer**
        - 응용프로그램 간의 접속 설정 및 유지, 동기화 유지 서비스를 통해 오류발생시 대처가능하게 해줌
        - 인터넷상 전송단위: data
        - SSL, TLS, ...
    - **L4: Transport Layer**
        - 데이터 전송 관련 서비스. 송수신측 사이의 연결설정, 오류 복구, 흐름제어 등의 서비스
        - 인터넷상 전송단위: segment
        - TCP, UDP, ...
    - **L3: Network Layer**
        - 데이터가 목적지까지 최적의 경로를 통해 전송될 수 있도록 데이터 전송과 경로 선택에 관한 서비스 제공
        - 인터넷상 전송단위: packet
        - 라우터 / IP, ICMP, ...
    - **L2: Data Link Layer**
        - L3로부터 받은 데이터에 헤더에 전송, 순서, 에러, 흐름을 제어하기 위한 정보를 담아 L1으로 전달
        - 인터넷상 전송단위: frame
        - 브릿지, 스위치 / Ethernet, Token Ring, ...
    - **L1: Physical Layer**
        - 실제 장치들을 연결. 케이블,연결장치
        - 인터넷상 전송단위: bit(signal)
        - 허브, 리피터 / RS-232,10BASE-T, ...

### **1.2. 네트워크 장비**
- LAN 구성 장비
    - **Network Card** 
        - = Network Interface Card = Ethernet Card = LAN Card = Network Adaptor
        - 네트워크안에서 컴퓨터끼리 통신하는데 쓰이는 하드웨어로 MAC 주소 할당시스템을 이용하여 physical layer, data link layer를 사용한다
    - **Cable**
        - 신호를 전송하는 물리적인 매체로 BNC, UTP, 광섬유 등이 있다.
        - BNC(동축 케이블)
            - noise에 강함 
            - 대역폭이 넓어 여러채널을 동시 수용가능
            - 굵음, 빠름, 비쌈
            - 연결되는 컴퓨터는 하나의 선으로 계속 연결 가능
            - 터미네이터 설치 필요 / 허브 불필요
            - 컴터 하나의 문제가 전체에 영향줄 수 있음 -> 안전하지 X
        - Twisted Pair
            - 꼬인 형태: 전자 신호 변형 방지
            - noise 취약, 저렴
            - 단독연결시 100m까지
            - UTP(Unshielded)
                - 차폐물 없음. 싸서 많이 사용. 8개 회선 있음
                - 종류는 대역폭과 전송속도에 따라 3 - 5 - 5 - 5e - 6 - 6e - 7
            - STP(Shielded): 차폐물 있음
            - FTP(Foil Screened): 은박 차폐물
            - 허브 사용 -> 컴퓨터 하나의 문제와 다른 컴퓨터는 독립
        - 광섬유
            -  가는 유리, 플라스틱 섬유
            - noise에 강하고 오류 발생이 적음
            - 작고 가벼움, 넓은 대역폭, 빠름
            - 비쌈
    - **Hub**
        - Ethernet network에서 여러 대의 컴퓨터 및 네트워크 장비를 연결하는 장치
        - 같은 허브에 연결된 장치는 모두 상호 간에 통신 가능
- Internetworking 장비
    - 네트워크와 네트워크의 연결을 internetworking이라 하며 이를 수행하는 장치를 일반적으로 Gateway라 부른다. 
    - Gateway는 서로 다른 통신망과 프로토콜을 사용하는 네트워크간에 통신을 가능하도록 하며 대표적으로 repeater, bridge, router 등이 있다. 
    - **Repeater**
        - L1에서 동작하며 먼 거리를 전송하면서 감쇄되는 신호를 증폭시켜 보완해준다.
    - **Bridge**
        - L2에서 리피터나 허브와 같은 기능을 하며 특정 네트워크로부터의 통신량 조절
    - **Router**
        - L1-L3의 기능을 지원. 브리지의 기능에 추가하여 L3에 대한 경로 선택 기능 제공


### **1.3. Ethernet/LAN의 기본 이해**
- 통신망의 종류는 규모에 따라 LAN, MAN, WAN 정도로 나뉜다
- **LAN (Local Area Network)**
	- 근거리. 집, 사무실, PC방 정도
	- 주로 Ethernet, WLAN 방식 사용.
	- 구성방식(topology)
		- Star형: 중앙 컴퓨터가 각 컴퓨터와 연결되어 통신한다. 중앙 컴퓨터 고장시 전체 중단
		- Bus형: 하나의 통신회선(bus)에 여러 컴퓨터를 연결하며 한번에 한 컴퓨터만 전송 가능 
		- Ring형: 원형의 통신회선에 컴퓨터와 단말기를 연결. 토큰 패싱 사용. 전송 충돌 없음
		- Mesh형: Star + Ring 형태. 라우터 이용하여 LAN들을 연결하거나 백본망 구성시 사용
	- 전송방식
		- Ethernet, CSMA/CD
			- CSMA: 회선을 체크하여 사용중이지 않으면 data 전송
			- CD: Collision Detection
			- MAC 주소를 기반으로 상호간 data 교환
			- 전송 매체:BNC, UTP, STP
			- 기기 간의 상호 연결: Hub, Switch, Repeater
		- Token Ring
			- Ring형 구성방식. 
			- Token이라는 일종의 사용권을 획득해야 data를 전송가능
		- FDDI
			- 광섬유 케이블을 사용하여 설계된 Ring 구조의 통신망
			- 이중 링 구조를 사용하여 한꺼번에 단절되는 경우 방지
- **MAN (Metropolitan Area Network)**
	- 도시 하나 정도의 규모로 도시 내의 여러 LAN을 묶어 놓은 형태
	- LAN보다 장거리이며 고속이고 음성과 데이터 모두 전송이 가능하다 
- **WAN (Wide Area Network)**
	- 국가, 대륙 등과 같은 넓은 지역을 연결하는 네트워크 
	- 거리제약 없음
	- LAN보다 느림, 전송 에러율 높음,
	- 구성방식
		- 전용회선 계약한 송수신 사용자끼리만 전용 통신 선로로 연결하기 떄문에 안전하지만 비쌈
		- 교환회선: PSTN, PSDN과 같은 공중망을 이용해 전송하는 방식으로 싸지만 느림. Circuit Switching, Packet Switching, ATM, 등이 있다.
	- Circuit Switching
		- 송수신자간의 물리적인 경로, 할당받을 대역폭을 미리 결정, 고정
		- 안정적이지만 효율적이지는 않다. 
	- Packet Switching
		- 전송 단위가 packet임
		- 전송 대역폭을 동적인 방식으로 공유
		- Datagram 방식: 연결 설정 과정이 없기 때문에 패킷들이 각기 다른 경로로 독립적으로 전송. 순서고 제각각
		- Virtual Circuit 방식: 송수신자간 가상의 파이프를 통해 모든 패킷이 동일한 경로로 전송. 순서도 그대로

#### 컴퓨터 통신망 발전
> 전화망 -> Telnet, Tymnet: 고품질의 데이터 서비스 제공 하기 위해 설치된 패킷 교환망 -> 장비들간 호환성 문제 -> 전화회사들을 중심으로 표준 프로토콜 제정 -> X.25

- **X.25**
	- 데이터 -> 패킷단위로 분할 -> 전송 -> 패킷 composition -> 수신자
	- 에러에 취약해서 에러 검출, 복구 기능을 탑재해야 했고 빠른 전송속도를 기대할 수는 없었다.
	- Packet Switching 기반
	- 1, 2, 3 계층에서의 처리
	- 고정된 대역폭을 가짐
- **Frame Relay**
	- X.25을 계승하고 단순화하여 만들어짐
	- 이제 망의 신뢰도가 높아졌으니 에러제어와 흐름제어 기능은 단말에서 담당하는 것으로 하고 우리는 전송(relay)기능만 하자 하여 나온 것
	- Virtual Circuit 기반
	- Frame 단위로 전송하며 Frame 은 길이가 변할 수 있는 단위이다.
	- Statistical Multiplexing 사용하여 대역폭을 동적으로 공유
	- 대역폭 절약, X.25 대비 낮아진 전송지연
- **Cell Relay**
	- ATM(Asynchronous Transfer Mode)라고도 한다.
	- Frame Realy에서 발전된 형태이다.
	- Asynchronous Time Multiplexing, 고속 패킷 교환 지원
	- 전송단위는 고정 길이를 갖는 패킷인 Cell이다
	- 고정 길이의 패킷을 사용함으로 가변적인 Frame을 사용할 때보다 오버헤드를 줄일 수 있있어 전송률이 빨라진다.

### **1.4. TCP/IP 및 네트워크 프로토콜의 이해**
- **Protocol의 개요**
	- 컴퓨터들이 서로 통신을 하기 위해 미리 정해놓은 통신 규칙.
	- 기본 구성 요소
		- Syntax: 전송할 data의 구조, 형태에 대한 내용
		- Semantic: 오류제어 및 data를 형태에 따라 어덯게 해석할지에 대한 내용
		- Timing: data를 언제 어떤 속도로 보낼 것인지에 대한 내용
- **Protocol의 기능**
	- Addressing: 주소지정 방식
	- Sequencing: data 전송순서 명시. flow control, error control에 사용
	- Fragmentation&Reassembly: 블록을 분할 전송 -> 재조합하여 수신
	- Flow Control: "(보내는 양) <= (처리가능한 양)"이 되도록 control
	- Error Control: data 교환시 발생하는 오류 검출
	- Connection Control: 연결 설정에 있어 syntax, semantic, timing을 제어하는 것
	- Synchronization: data 교환시 타이머, 윈도우의 인자값을 일치시키는 것
	- Multiplexing: 하나의 통신 선로에서 다중 시스템이 동시에 통신
	- Transmission: 우선순위 결정, 서비스 등급, 보안 요구 등의 제어 서비스
	- Encapsulation: Data가 하위 layer로 갈때 현재 layer의 정보를 헤더에 덧붙임
	- Decapsulation: 하위 layer에서는 상위 layer에서 온 정보를 data 취급
- **Protocol 제정 기관**
	- ISO(International Organization for Standardization): 국제적인 표준화 기구
	- IEEE(Institute of Electrical and Electronics Engineers): 전기전자공학 주요 표준 및 연구정책 발전
	- ANSI(American National Standards Institute): 미국의 산업 표준을 제정
	- EIA:(Electronic Industries Alliance): 미 전자 산업 협회
	- ITU-T(International Telecommunication Union-T): ITU의 산하기구 중 전기통신 표준화 부문을 담당
- **TCP/IP의 개요**
	- 컴퓨터 기종에 관계없이 정보 교환이 가능하도록 해준다.
	- TCP는 packet의 흐름을 제어하고 IP는 packet을 목적지까지 전달한다.
- **TCP/IP의 구조**
	- L4(Application): 프로세스간의 통신. L3의 프로토콜을 사용하여 호스트간의 연결의 확립한다. 
	- L3(Transport): data를 segment 형태로 수신자에게 전달. 연결, 신뢰성, 흐름에저, 다중화 서비스 제공
	- L2(Internet): L3에서 받은 data를 packet 형태로 목적지까지 효율적으로 전달
	- L1(Network Interface): 물리적인 네트워크로 프레임을 전달
- **TCP & UDP**
	- TCP
		- src-dst를 1:1로 연결하여 직접 제어하기 때문에 속도가 느리다
		- 전송과 오류 수정에 있어 안전성과 신뢰성이 높다. 
	- UDP
		- 연결 과정, 전송 성공 여부 체크, 오류 수정 없음
		- 빠르지만 안정성은 떨어짐
- **Protocol number**
	- 서로 다른 프로토콜의 system에서 전송되는 데이터를 처리하기 위해 datagram header에 첨부
	- 리눅스 시스템에서의 protocol#들은 ``/etc/protocols``에서 확인 가능
- **Port number**
	- L3에서는 서비스 다중화를 위해 각각의 App들이 할당된 포트를 이용해 데이터를 주고 받는다.
	- 리눅스 시스템에서는 ``/etc/services``파일에서 주요 포트 번호를 확인 가능 
- **Scoket**
	- 네트워크상의 컴퓨터에서 통신을 위한 접점
	- 네트워크 관련 프로그램들은 상호간 데이터 교환을 위해 socket을 생성하고 socket으로 통신
	- protocol, src IP, src Port, dst IP, dst Port 정보를 담는다.
- **IP주소**
	- 인터넷에서 다른 컴퓨터와 서로 인식하고 통신하기 위해 컴퓨터마다 고유하게 제공되는 숫자
	- IPv4는 4부분의 8bit로 이뤄져 있다
	- [네트워크 ID 부분][host ID 부분] 으로 구성
	- 첫번째 8bit영역의 처음 4비트에 따라 class가 결정된다.
- **IP의 클래스**
	- A: 0XXXXXXX.xxxxxxxx.xxxxxxxx.xxxxxxxx  		Net ID: 0~127
	- B: 10XXXXXX.XXXXXXXX.xxxxxxxx.xxxxxxxx 		Net ID: 128.0~191.255
	- C: 110XXXXX.XXXXXXXX.XXXXXXXX.xxxxxxxx	Net ID: 192.0.0~223.255.255
	- D: 1110XXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX	Net ID: 224.0.0.0~239.255.255.255
	- E: 1111XXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX 	Net ID: 240.0.0.0~255.255.255.255
- **특수 목적 IP**
	- A~C 클래스의 IP들 중에는 특수 목적으로 사용되는 주소가 있다.
	- Private IP: 내부 네트워크를 구축할 때 사용
		- A: 10.0.0.0~10.255.255.255 		(1개의 네트워크)
		- B: 172.16.0.0~172.31.255.255	(16개의 네트워크)
		- C: 192.168.0.0~192.168.255.255 	(256개의 네트워크)
	- Loopback: 자기 자신을 가리킨다.
		- 127.0.0.0~127.255.255.255 사용
- **Domain Name**
	- 숫자 IP -> 계층으로 구분된 name
	- ICANN에서 관리한다.
- **Domain Name System**
	- 원래는 'hosts' 라는 정적 파일을 중앙에서 관리하고 공유하고 업데이트 했다.
	- 컴퓨터가 많아지면서 중앙 관리가 어려워져 DNS가 등장했다.
	- 체계
		- 0: Root
		- 1: gTLD(generic Top Level Domain) / ccTLD(Country code Top Level Domain)
		- 2: SLD(Second Level Domain): 기관명 또는 기관 종류
		- 3: 희망 문자열
- **ICANN**
	- Internet Corporation for Assigned Names and Numbers
	- 도메인 네임, IP, 프로토콜의 범주와 포트 번호 할당, DNS 관련 이슈를 담당하는 비영리 기관
- **IPv6**
	- IPv4의 주소 고갈 문제를 해결하기 위해 등장
	- 128bit
	- [16bit 16진수]:[16bit 16진수]: ....... [16bit 16진수]X8개로 표현
	- 특징
		- IP 주소 32bit -> 128bit 확장
		- Packet 크기 64kb -> (임의의 큰 크기) 확장
		- IPv6 호스트가 IPv6 네트워크에 접속하면 네트워크 주소 자동으로 할당
		- 헤더 구조 단순화
		- flow label을 도입하여 흐름제어 기능을 지원
		- IPv6 확장 헤더를 통해 패킷 출처 인증, 데이터 무결성 및 비밀 보장 기능 적용 가능
		- IPv6 호스트는 네트워크의 물리적 위치 제한없이 같은 주소를 유지하면서 이동 가능
  
---

## 2. 네트워크 설정

### **2.1. 환경 설정**
- 리눅스 네트워크
  - **설치 순서**
    - Network HW --> Network Protocol --> Network Service Program
  - 하드웨어 설치
    - Ehternet Card, Modem, Serial/Parallel Cable, 등등...
    - lo: local loopback을 나타냄. 가상으로 만들어진 NIC
    - eth_: CentOS6.x 이전까지 Ehternet Card
    - enp_: CentOS7.x 부터 사용된 Ehternet Card
    - dl_, sl_, ppp_, plip_, tr_, fddi_, virbr_, xenbr_, docker_, .....
  - Protocol 설치
    - SLIP, PPP, TCP/IP 등을 설치해야 하지만 리눅스는 대부분의 프로토콜을 기본적으로 지원함
  - 서비스 프로그램 설치
    - 웹 서버, 메일 서버, FTP 서버 등.....
- 이더넷 카드 설치하기
  - 대부분 자동으로 인식하여 설치
  - 새로 출시된 카드라 인식을 못하는 경우
  1. Ehternet Card 제조사 홈페이지에서 module file 설치
  2. modprobe 명령으로 kernel에 로드 --> lsmod 명령으로 kernel에 로드된 것 확인
  3. 영구적으로 변경하려면: /etc/modprobe.conf 또는 /etc/modprobe.d 디렉토리 내의 파일들 설정
- 인터넷 접속을 위한 설정
  - 과거: 모뎀(HW) + PPP,SLIP(Protocol) + pppd(데몬 서비스) --> 현재: Ehternet Card
  - 네트워크 설정을 위해: IP addr, Netmask addr, Gateway addr 설정 필요 
  - Netmask
    - 네트워크를 분할하여 새로운 하위의 네트워크를 구성
    - 이진 표현법을 기준으로 1로 표시된 부분까지가 Network ID 파트(네트워크 파트)가 된다.
    - 네트워크 부분이라는 것은 데이터를 전송할 떄 라우터를 거치지 않고 전송이 가능하다는 의미
    - A, B, C 클래스에 따라 차이가 있다.
    - subnet의 갯수
      - = network내의 network addr갯수 
      - = network내의 broadcast addr 갯수
      - = network내의 gateway addr 갯수 (인터넷에 연결될 경우)
      - netmask=255.255.255.0 인 경우: 1개
      - netmask=255.255.255.128 인 경우: 2개
      - netmask=255.255.255.192 인 경우: 4개 
  - Gateway
    - 서로 다른 통신망이나 프로토콜을 사용하는 네트워크간의 통로 역할
    - 인터넷에 연결하려면 Gateway 주소가 필요하다
  - Network addr
    - 네트워크를 대표하는 주소
  - 주소들(C class 기준)
    - Netmask addr: A=255.0.0.0 / B=255.255.0.0 / C=255.255.255.0
    - Gateway addr: [ Network_ID ].1 또는 [ Network_ID ].254
    - Network addr: [ Network_ID ].0
    - Broadcast addr: [ Network_ID ].255
- 네트워크 인터페이스 설정 방법
  - GUI 기반
    - [ 시스템 ] - [ 기본 설정 ] - [ 네트워크 연결 ]
    - 또는 `$ nm-connection-editor`
    - IP 자동 할당 방식 -> "DHCP" 선택
	- static IP 할당시 -> "수동" 선택후 IP 주소 입력
  - TUI 기반
    - `$ setup` 또는 `$ system-config-network`
  - 명령어 이용
    - ifconfig, route 명령어 이용
    - 재부팅하면 초기화된다.
  - 네트워크 관련파일 이용
    - 이 방법이 재부팅뒤에도 지속적으로 변경되도록하는 방법임
    - 설정 파일
      - `/etc/sysconfig/network`
      - `/etc/sysconfig/network-scripts/ifcfg-eth0`
      - `etc/resolv/.conf`
    - 데몬 재시작
      - `$ /etc/rc.d/init.d/network restart`
      - `$ /etc/init.d/network restart`
      - `$ service network restart`

### **2.2. 관련 명령어**
- options: 실제 사용시에는 맨 앞글자만
- **`$ ifconfig [ interface ] [ address ] [ option ]`**
  - IP, netmask, MAC 등을 설정, 확인
  - interface: eth0, lo, wlan, .....
  - address: netmask [ address ] broadcast [ address ] ....
  - option: up, down, ....
  - 출력 항목들
    - Link encap: NI의 형식
    - HWaddr: MAC
    - inet addr: IPv4
    - Bcast: broadcast
    - Mask: netmask
    - UP / BROADCAST / RUNNING / MULTICAST
    - MTU: 한번에 전송할 수 있는 패킷의 최대 크기
    - Metric, RX/TX
    - collisions: 충돌이 발생한 패킷 수
- **`$ route [ add|del ] [ dst ] netmask [ netmask 값 ] gw [ gw 값 ] dev [ 인터페이스 ]`**
  - routing table 정보
  - Netwok addr, Gateway addr
  - `$ netstat -r` 과 유사
  - 항목 설명
    - Destination: 목적지 Network addr
    - Gateway: 목적지 주소로 보내기 위한 Gateway addr
    - Genmask: 목적지의 network addr을 알아내기 위한 netmask
    - Flags: 목적지 네트워크와의 연결 상태 (Use, Gateway, Host, D, Modify)
    - Metric: 목적지 네트워크와의 거리 (hop count)
    - Ref, Use, lface
- **`$ netstat [ option ] [ address_family_option ]`**
  - 네트워크의 연결 상태
  - options
    - [ -all ], [ -numeric ], [ -pid ], [ -routing ], [ -listening port ]
    - [ -interface info ], [ -statistical info ], [ -continuous display ]
    - [ -tcp ], [ -udp ], [ -group member info ]
  - address family options
    - [ --protocol=value ], [ --inet, --ip ], [ --unix ]
  - 출력내용 중 state 부분
    - LISTEN: socket을 열고 waiting
    - SYS-SENT: 원격 호스트에 연결을 요청한 상태
    - SYN_RECEIVED: client에게 접속 허락했지만 client한테 답장은 아직
    - ESTABLISHED: 3way-handshaking 완료
    - FIN-WAIT1: host의 socket closed, 연결 종료 요청
    - FIN-WAIT2: 상대로부터 연결종료 accepted. 상대로부터 closed 메세지 기다리는중
    - CLOSE_WAIT: 원격 host는 종료되고 나는 socket 종료하려는 중
    - LAST_ACK: 나도 socket 닫고 원격 host로부터 마지막 ACK 기다리는중
    - TIME_WAIT: 패킷 처리는 끝났지만 분실되었을지도 모르는 segment 기다리는 상태
    - CLOSING: ACK이 분실된 상태
    - CLOSED: 소켓 연결 종료
    - UNKNOWN: 소켓 상태를 확인할 수 없는 상태
- **`$ arp [ option ]`**
  - ARP(Address Resolution Protocol) Cache를 관리하는 명령
  - ARP Cache: 현재 접속되어 잇는 IPv4를 MAC으로 바꿔서 기억하는 곳
  - options
    - [ -a: 특정 host ], [ -delete ], [ -numeric ], [ -v: 자세히 ]
- **`$ ping [ option ] [ hostname | IP_addr ]`**
  - options 
    - [ -count ], [ -interval ], [ -size ], [ -w: w초 후 중지 ]
    - TTL: data의 유효기간을 나타냄
- **`$ traceroute [ hostname | IP_addr ]`**
  - 패킷이 특정 라우터까지 라우팅되는 과정을 출력하는 명령
  - ***로 나오는 경우: 전달이 지연되고 있거나 firewall인 경우
- **`$ nslookup [ option ] [ hostname | IP_addr ]`**
  - DNS를 이용하여 도메인이나 IP를 조회하는 명령
  - options
    - [ -type=value ]: 메일 서버는 mx, 네임서버는 ns, 등 ...
- **`$ dig [ option ] 도메인명 [ type ]`**
  - 도메인명(FQDN)으로 정보를 조회하는 명령
  - ex) www가 hostname이고 naver.com이 도메인인 FQDN은 www.naver.com 임
  - option: [ -type ]
  - type: MX, NS, .... -t와 같은 효과
- **`$ host [ option ] 도메인명`**
  - 도메인명으로 정보를 조회하는 명령
  - options
    - [ -type ]: DNS쿼리 질의 형식을 지정. default=A 이고 MX, NS등이 들어갈 수 있다.
    - [ -v ]: 도메인에 대한 자세한 정보 출력
    - [ -any ]: 
    - [ -C ]: SOA record 조회
- **`$ hostname [ option ] [ hostname ]`**
  - 시스템에 설정된 호스트네임을 출력하거나 설정하는 명령
  - options
    - [ -v ]: 자세한 호스트명 정보
    - [ -domain ], [ -full ], [ - alias ], [ -ip ]
- **`$ mii-tool [ option ] 네트워크 장치명`**
  - Media Independent Interface Tool
  - 네트워크 인터페이스의 상태를 점검하고 설정
  - options:
    - [ -restart ]
    - [ -Force ]
    - [ -verbose ]
- **`$ ethtool [ option ] [ 이더넷 카드명 ] [ 변경 내용 ]`**
  - 이더넷 카드의 설정 정보를 출력하거나 변경
  - options
    - [ -s ], [ --change ]: 이더넷 카드의 설정을 변경
- **`$ ip [ option ] object [ command ]`**
  - 이더넷 장치, ip, 라우팅 정보 등의 설정 정보 출력 또는 변경
  - OPTIONS := { -V[ersion] | -h[uman-readable] | -s[tatistics] | -d[etails] .....}
  - OBJECT :=
    - address: IPv4 또는 IPv6 주소
    - route: routing table 목록
    - link: 네트워크 장치를 의미
  - COMMAND := { add | del | show | list}
  - ex) ip addr add 192.168.5.13/24 dev eth1 ip 주소 설정
- **`$ ss [ options ] [ filter ]`**
  - socket statistics
  - socket 상태를 출력. netstat과 유사.
  - 다른 도구에 비해 TCP및 상태 정보에 더 많은 정보를 제공
  - options
    - [ -all ], [ -numeric ], [ -resolve ], [ -listening ]
    - [ -extended ], [ -processes], [ -info ], [ -summary ]
    - [ -tcp ], [ -udp ], [ -f family_name ]
    - [ -o ]: 시간 관련 정보
    - [ -4 ]: IPv4 정보만
    - [ -6 ]: IPv6 정보만
    - [ -0 ]: PACKET 소켓 정보를 출력
    - [ -x ]: unix 도메인 소켓 정보만
- **`$ telnet [ option ] [ hostname | IP_addr ] [ telnet_server_port ]`**
  - 원격지 텔넷 서버에 접속할 때 사용~~
  - 서버의 포트 점검하는 용도로도 사용~~
  - option
    - [ -l user_name ]: 현재 로그인 계정이 아닌 다른 계정으로 접속
- **`$ ftp [ hostname | IP_addr ]`**
  - ftp 서버에 접속할때 사용
  - ftp COMMAND := { help | ls | put | get | size | mkdir | rmdir | status | quit | mput | mget | cd | rename | chmod | delete | mdelete | close | open | lcd | hash | bi | passive}
- **네트워크 관련 파일**
  - `/etc/sysconfig/network`
    - 네트워크 사용유무, 호스트명, 게이트웨이 주소 설정, 게이트웨이 장치 파일 설정,..
  - `/etc/sysconfig/network-scripts` 디렉터리
    - 네트워크 인터페이스 환결 설정과 관련된 파일들 저장
  - `/etc/resolv.conf`
    - 시스템에서 사용하는 네임서버를 설정
  - `/etc/hosts`
    - DNS가 없을때 IP와 호스트명을 매핑시켜주던 파일 


<!--stackedit_data:
eyJoaXN0b3J5IjpbLTgyMDQwMTQwMl19
-->

---

[Ref]: 정성재, 배유미. 리눅스 마스터 1급 정복하기 (1차,2차 시험대비). n.p.: 북스홀릭퍼블리싱, 2018.	
<!--stackedit_data:
eyJoaXN0b3J5IjpbLTE4NzQ2MDk5ODEsMTc1ODg0NjIxNSwxNT
U0NDg2MjUsNzQ2MDcyOTM1LC0xNTc0MDcyOTYxXX0=
-->